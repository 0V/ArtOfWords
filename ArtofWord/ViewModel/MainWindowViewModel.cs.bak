using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WritersBattleField.ViewModel;
using ModernizedAlice.ArtOfWords.BizCommon.TestModel;
using System.Windows;
using ModernizedAlice.ArtOfWords.BizCommon.Event;
using CharacterBuildControll.Model;
using StoryFrameBuildControl.Model;
using ItemBuildControl.Model;
using System.Windows.Controls;
using System.Windows.Media.Imaging;
using System.ComponentModel;
using ModernizedAlice.ArtOfWords.BizCommon.Model.Event;
using ArtOfWords.Salesman;
using ModernizedAlice.ArtOfWords.BizCommon.Model.SaveAndLoad;
using ModernizedAlice.ArtOfWords.BizCommon;
using Microsoft.Win32;
using System.Windows.Input;
using System.Threading;
using ModernizedAlice.ArtOfWords.BizCommon.Util;
using System.IO;
using System.Reflection;

namespace ArtOfWords.ViewModel
{
    public class MainWindowViewModel : INotifyPropertyChanged
    {
        private bool _isDirty;
        public bool IsDirty
        {
            get
            {
                return _isDirty;
            }
            set
            {
                if (_isDirty != value)
                {
                    _isDirty = value;
                    OnPropertyChanged("IsDirty");
                    OnPropertyChanged("Title");
                }
            }
        }

        public string Title
        {
            get
            {
                StringBuilder builder = new StringBuilder();
                builder.Append("Art Of Words");
                if (_fileManager != null)
                {
                    if (_fileManager.CurrentFile.Count() > 1)
                    {
                        builder.Append(" [" + _fileManager.CurrentFile + "] ");
                    }
                }
                if (IsDirty)
                {
                    builder.Append("*編集中　CTRL + S でセーブできます");
                }

                return builder.ToString();
            }
        }

        private int _selectedTab;
        public int SelectedTab
        {
            get
            {
                return _selectedTab;
            }
            set
            {
                if (_selectedTab != value)
                {
                    _selectedTab = value;

                    SelectTabChanged();
                }
            }
        }

        private BitmapImage _adsTabImage;
        public BitmapImage AdsTabImage
        {
            get
            {
                return _adsTabImage;
            }
            set
            {
                if (_adsTabImage != value)
                {
                    _adsTabImage = value;
                    OnPropertyChanged("AdsTabImage");
                }
            }
        }

        private string _adsPage;
        public string AdsPage
        {
            get
            {
                return _adsPage;
            }
            set
            {
                if (_adsPage != value)
                {
                    _adsPage = value;
                    OnPropertyChanged("AdsPage");
                }
            }
        }

        private bool _isAdsVisibility;
        public bool IsAdsVisibility
        {
            get
            {
                return _isAdsVisibility;
            }
            set
            {
                if (_isAdsVisibility != value)
                {
                    _isAdsVisibility = value;
                    OnPropertyChanged("IsAdsVisibility");
                }
            }
        }

        public string MyFileVersion
        {
            get
            {   
                //自分自身のAssemblyを取得
                var asm = System.Reflection.Assembly.GetExecutingAssembly();
                //バージョンの取得
                var ver = asm.GetName().Version;

                return "ArtOfWords(Ver." + ver.ToString(3) + ")";
            }
        }

        private FileManager _fileManager;


        public MainWindowView _view;

        public WritersBattleFieldViewModel _writersBattleFieldViewModel;
        public CharacterBuildViewModel _characterBuildControlViewModel;
        public ItemBuildControlViewModel _itemBuildControlViewModel;
        public StoryFrameBuildControlViewModel _storyFrameBuildControlViewModel;

        public MainWindowViewModel(MainWindowView view)
        {
            IsAdsVisibility = false;
            _selectedTab = 0;

            _view = view;

            _writersBattleFieldViewModel = new WritersBattleFieldViewModel();
            _characterBuildControlViewModel = new CharacterBuildViewModel();
            _storyFrameBuildControlViewModel = new StoryFrameBuildControlViewModel();
            _itemBuildControlViewModel = new ItemBuildControlViewModel();

            _fileManager = new FileManager();

            _view.BindData(this);

            //TestBizModel.PrepareForTest();

            // WindowShowイベントに登録
            EventAggregator.ShowEventRised += OnShowWindowEvent;
            EventAggregator.AdsLoaded += OnAdsLoaded;
            EventAggregator.DataReloaded += OnDataReloaded;
            EventAggregator.ModelValueChanged += OnModelChanged;
            EventAggregator.SaveSucceeded += OnSaved;
            EventAggregator.TryClose += OnTryClose;
            EventAggregator.TrySave += OnTrySave;
            EventAggregator.TryOpen += OnTryOpen;
            EventAggregator.TryCreateNew += OnTryCreateNew;
        }
        private bool Initialized = false;
        public void InitializeViews()
        {
            _view.BindData(this);
            _writersBattleFieldViewModel.Initialize(_view.GetWritersBattleFieldView());
            _characterBuildControlViewModel.Initialize(_view.characterBuildControl1);
            _storyFrameBuildControlViewModel.Initialize(_view.storyFrameBuildControll);
            _itemBuildControlViewModel.Initialize(_view.itemBuildControl);

            LoadAdOfWorld words = new LoadAdOfWorld();
            words.Load();

            if (!Initialized)
            {
                Initialized = true;
                OnFirstInitialized();
            }
        }

        public void OnFirstInitialized()
        {
            string[] args = Environment.GetCommandLineArgs();
            if (args.Count() == 2)
            {
                _fileManager.OpenFile(_writersBattleFieldViewModel.GetMainViewTextBox(), args[1]);
            }
            else
            {
                string filePath = Properties.Settings.Default.LastSavedFilePath;
                if (!Path.IsPathRooted(filePath))
                {
                    Assembly myAssembly = Assembly.GetEntryAssembly();
                    string path = myAssembly.Location;
                    filePath = Path.Combine(Path.GetDirectoryName(path), filePath);
                }
                if (File.Exists(filePath))
                {
                    _fileManager.OpenFile(_writersBattleFieldViewModel.GetMainViewTextBox(), filePath);
                }
            }
        }

        private void OnShowWindowEvent(object sender, ShowWindowEventArgs e)
        {
        }

        private void OnAdsLoaded(object sender, AdsLoadedEventArgs e)
        {
            AdsTabImage = e.AdsTabImage;
            AdsPage = "http://www.kienai.com/adsofworld/AdsOfWorld.html";
            IsAdsVisibility = true;
        }

        private void OnDataReloaded(object sender, int data)
        {
            InitializeViews();
            IsDirty = false;
            OnPropertyChanged("Title");
        }

        private void OnModelChanged(object sender, int data)
        {
            IsDirty = true;
        }

        private void OnSaved(object sender, int data)
        {
            IsDirty = false;
            OnPropertyChanged("Title");
        }

        private void OnTryCreateNew(object sender, TryCreateEventArgs arg)
        {
            if (IsDirty)
            {
                if (AskSaving() == AskSaveResult.Cancel)
                {
                    return;
                }
            }
            _fileManager.CreateNew(arg.textBox);
        }

        private enum AskSaveResult
        {
            CanProcess,
            Cancel,
        }

        private AskSaveResult AskSaving()
        {
            MessageBoxResult res = MessageBox.Show("そのまえに、データを保存しますか？（「いいえ」を押すと変更内容は破棄されます）", "確認", MessageBoxButton.YesNoCancel, MessageBoxImage.Question);
            if (res == MessageBoxResult.Cancel)
            {
                return AskSaveResult.Cancel;
            }

            if (res == MessageBoxResult.No)
            {
                return AskSaveResult.CanProcess;
            }

            if (_fileManager.SaveFile() == false)
            {
                return AskSaving();
            }

            return AskSaveResult.CanProcess;
        }

        private void OnTryClose(object sender, int data)
        {
            TryClose();
        }

        public bool TryClose()
        {
            if (IsDirty)
            {
                if (AskSaving() == AskSaveResult.Cancel)
                {
                    return false;
                }
            }
            return true;
        }

        private void OnTrySave(object sender, SaveKind data)
        {
            // 一旦フォーカスを外します。
            var prevFocus = FocusManager.GetFocusedElement(_view);
            FocusManager.SetFocusedElement(_view, _view);

            // 溜まってるイベントは全部処理させる
            WPFUtil.DoEvents();

            _writersBattleFieldViewModel.SetTextToModelsComposite();
            if (data == SaveKind.SaveWithName)
            {
                _fileManager.SaveFileWithName();
            }
            else
            {
                _fileManager.SaveFile();
            }

            FocusManager.SetFocusedElement(_view, prevFocus);
        }

        private void OnTryOpen(object sender, TryOpenEventArgs data)
        {
            if (IsDirty)
            {
                if (AskSaving() == AskSaveResult.Cancel)
                {
                    return;
                }
            }
            _fileManager.OpenFile(data.textBox);
        }

        public void SelectTabChanged()
        {
            if (_selectedTab == 0)
            {
                _writersBattleFieldViewModel.Mode = WritersBattleField.ViewModel.ViewMode.Writing;
            }
            if (_selectedTab == 1)
            {
                _characterBuildControlViewModel.Initialize(_view.characterBuildControl1);
            }
            if (_selectedTab == 2)
            {
                _itemBuildControlViewModel.Initialize(_view.itemBuildControl);
            }
            if (_selectedTab == 3)
            {
                _storyFrameBuildControlViewModel.Initialize(_view.storyFrameBuildControll);
            }
        }


        #region INotifyPropertyChanged

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string name)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(name));
            }
        }

        #endregion

        #region properties

        #endregion
    }
}
